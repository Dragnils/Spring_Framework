то, что мы собираемся сделать, это преобразовать их в сущности JPA, и первое, что нам нужно сделать, это аннотировать классы как сущность.

Мы делаем это с помощью объекта, и мы видим, что там появляются две аннотации и intellisense, и мы хотим, чтобы Java X сохранялся, и это официальный JPA API, который мы используем, поэтому мы
определенно хотим использовать его, а не специфичный для Hibernate. и я собираюсь сделать то же самое для книги, вы можете видеть, что IntelliJ пытается вызвать спящий режим, который нам не нужен, и
похоже, что он в любом случае устарел, так что теперь мы пометили оба из них как объекты и так что они появятся как объекты JPA, но мы еще не закончили.
В настоящее время проблема в том, что у нас нет уникального способа идентифицировать их с точки зрения постоянства, поэтому имя, фамилия, у вас может быть несколько авторов с именем, фамилия, поэтому нам
нужно добавить какой-то уникальный тип.
Идентификатор, так что я собираюсь сделать, это добавить новое свойство, длинное свойство и теперь не нужно использовать долго, я просто назову его идентификатором, и я пойду сюда и добавлю хороший
сеттер для это и я просто делаю команду new на OS X по крайней мере, и теперь у меня есть геттер и сеттер для этого свойства, и это то, что известно как утечка из
ORM из реляционной базы данных на объектный уровень, потому что в действительности в мире ОО мы не заботимся о значении идентификатора, но здесь, когда мы сохраняем его, нам нужен некоторый тип
уникального идентификатора, так что это небольшая утечка между реляционными и объектно-ориентированная парадигма теперь нам нужно сказать JPA, что это идентификатор, снова мы используем идентификатор
персистентности Java X, и мы также расскажем, как его генерировать, поэтому мы будем говорить, что это генеративное значение, и в этом случае мы собираемся сделать стратегию и генерацию Auto, и это будет
 и то и другое, h2 поддерживает это, а MySQL поддерживает это. Я попробовал это в Oracle 12, это не совсем работало, но некоторое время назад они, возможно, получили изломы из этого, так что я не думаю,
 что реализация hibernate была вполне готова, когда я попробовал это. Так что я собираюсь приехать сюда, и я делаю вырезки и вставки просто для ускорения вещей, помните, что вырезки и вставки - это зло,
 и вы не должны пытаться делать это дома, а теперь мне нужно добавить также идентификатор, получатели и сеттеры для этого, так что теперь у меня есть все это настроено, и теперь, когда мы должны сделать
 последнее, мы сказали ему, что у нас есть набор, и что мы хотим сделать, это сказать JPA, что у нас будет много отношение «ко-многим» здесь, поэтому у нас будет много-много авторов к книгам,
 а также много-много для книг и авторов, так что это определит это отношение, позволяющее создать его в базе данных. Теперь Hibernate собирается сделать некоторые предположения для нас,
  и я собираюсь запустить весеннюю загрузку прямо сейчас.
Итак, я вошел в IntelliJ. Я работаю на весеннем стенде точно так же, как если бы я пошел в Maven и выполнил весеннюю загрузку, так что мы можем видеть, что он подошел довольно быстро,
и вы можете увидеть здесь какую-то спящую болтовню о том, Мы сделали импорт, и он фактически был создан и создан для нас на лету, и теперь есть совет по базе данных h2,
и мы получаем эту страницу с ошибкой, потому что раньше она была включена по умолчанию, но это не так, что нам нужно сделать, это зайти сюда Я оставил это, чтобы вы могли видеть это,
и я собираюсь использовать IntelliJense IntelliJ h23, и мы можем видеть, что пупок совета h2 с пружинной точкой является ложным. Я собираюсь изменить это на true, и мы перезапустим все,
чтобы мы могли получить этот совет по базам данных, потому что я хочу показать вам базу данных в памяти, поэтому в фоновом режиме весна запустила для нас базу данных h2.
Давайте вернемся сюда и проверим это, теперь единственное, что вы делаете, это следите за своим URL-адресом JDBC, так что вы определенно хотите иметь тестовую базу данных JDBC h2 mem,
 если у вас есть что-то еще, и я думаю, что она для меня кешируется У меня были другие проблемы с этим, я думаю, что это почему-то кэшируется в моем браузере. Я могу войти и подключиться,
  но посмотрите этот URL, и теперь мы можем увидеть, что hibernate создан для нас в h2, поэтому у нас есть автор, авторские книги, книги и авторы книг, так что это будет устанавливать отношения,
  и мы, вероятно, хотим изменить это, потому что я не слишком доволен тем, как это получилось. Это не очень хорошая схема базы данных для нас, но это просто использование отображений по умолчанию,
  и мы собираемся определенно изменить это, чтобы у нас были лучшие отношения и указать таблицы соединений, но это первый пользователь hibernate, который нашел очень минимальное отображение JPA для нам,
   так что я собираюсь переключиться сейчас и исправить эту маленькую проблему, которая у нас есть, поэтому мы хотим избавиться от авторских книг и авторов книг, они автоматически генерируются hibernate,
    и мы не хотим такого поведения, поэтому я ' Я собираюсь переключиться на IntelliJ, и первое, что мне нужно сделать, это проверить автора и сказать, что он сопоставлен с авторами, так что это будет целевая
    сторона, поэтому мы создаем для него отношение к книгам, и следующее, что нам нужно сделать, это немного сложнее, потому что нам нужна только одна объединенная таблица, а не две, потому что мы не указали
     информацию, поэтому hibernate пытается чтобы выполнить оба пути направления, и мы хотим на самом деле иметь одну таблицу, чтобы определить эти отношения, поэтому нам нужно добавить то, что называется
     объединенной таблицей, и в этом случае мы собираемся сказать имя, чтобы мы делая книгу авторов, чтобы мы быстро переключились на Chrome, и вы можете видеть, что он создал книги авторов и авторов книг,
     что не является тем, что мы хотим, поэтому мы собираемся переопределить это, и теперь нам также нужно рассказать об этом объединенные столбцы, я собираюсь сказать, что объединенные столбцы.
      и что это будет делать, если мы кратко рассмотрим, как работает отображение по умолчанию и режим гибернации, это создание идентификатора авторов и идентификатора книг, поэтому мы хотим получить
       единственное значение идентификатора, чтобы изменить это поведение, а затем, наконец, нам нужно указать столбцы обратного соединения, так что теперь у меня есть указанный столбец, в котором говорится,
       что идентификатор книги и идентификатор автора получают эти столбцы в единственном числе, и давайте еще раз быстро взглянем сюда, чтобы мы могли видеть, что у меня есть два совместных В столбце,
       поэтому я указываю с этими аннотациями, что мне нужна отдельная таблица, так что давайте продолжим и перезапустим это сейчас, и произойдет следующее: hibernate перезапустит и сгенерирует DDL схемы
       для нас в фоновом режиме на основе наших отображений JPA. Они появятся довольно быстро, увидят, что это резервное копирование, и мы собираемся сделать обновление здесь, чтобы увидеть,
       что наша база данных изменилась, и теперь мы можем видеть, что у нас есть книга автора и книга автора, и у нас есть один идентификатор книги и единственный автор ID, так что теперь у нас
       есть одна реляционная таблица, чтобы определить это отношение «многие ко многим» для нас. Хорошо, это отличное введение в JPA на тот случай, если вы ничего не знали о JPA раньше, я надеюсь,
       что это дало вам хорошее основание здесь и сейчас, ясно, что мы рассмотрели только самые основы JPA. Я пытаюсь дать вам очень стандартный объект. реляционная модель для работы,
        и мы собираемся работать с этим в будущем и получать эти данные, а в действительности поместить данные в базу данных в конце, в конце раздела курса, который мы собираемся отобразить в сети.
        страница, но это как основы в дальнейшем, мы собираемся углубиться в JPA и показать вам более продвинутые возможности использования JPA-отображений. Но сейчас мы только начинаем,
         поэтому я не хотел заходить слишком далеко в эту кроличью нору, мы получили гораздо больше, чтобы охватить в этом разделе курса, вплоть до получения данных в базу данных
         и через пружинный контроллер MVC и на веб-странице для нас.